5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getpwd()
getwd()
ls()
9 <- 9
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir = getwd()
getwd()
old.dir = "/home/vasyunin/projects/git/datasciencecoursera"
old.dir <- getwd()
dir.create("testdir")
setwd("testdir/")
file.create("mytest.R")
dir
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir()
dir.create(file.path"(folder1", "folder2"), T)
dir.create(file.path"(folder1", "folder2"), recursive=TRUE)
dir.create(file.path("folder1", "folder2"), recursive=TRUE)
dir.create(file.path('folder1', 'folder2'), recursive=TRUE)
dir.remove(file.path('folder1', 'folder2'), recursive=TRUE)
dir.create(file.path('folder1', 'folder2'), recursive=TRUE)
dir.create(file.path('folder2', 'folder3'), recursive=TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd('./')
dir()
setwd(old.dir)
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?':'
seq(1,20)
seq(1,20,by=0.5)
seq(1,10,by=0.5)
seq(0,10,by=0.5)
seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length(my_seq)
seq(1,length(my_seq))
1:length(my_seq)
seq(along.with = my_seq)
play()
?along
?along.with
??along.with
nxt()
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), 10)
rep(c(0,1,2), times = 10)
rep(c(0, 1, 2), each = 10)
c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect[<1]
tf <- num_vect <1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Yaroslav")
my_name
paste(my_name, " ")
paste(my_name, collapse=" ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[1,4,7]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
typeof(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colames(my_data) <- cnames
colnames(my_data) <- cnames
my_data
swirl()
2 *
55
getdir()
dir()
getwd()
add2 <- function(x, y) {
x + y
}
add(3,5)
add2(3,5)
adove10 <- function(x) {
use <- x > 10
x[use]
}
above10(1:100)
above10([1:100])
x <- 1:100
above(x, 25)
above10(x, 25)
adove10 <- function(x, n) {
use <- x > n
x[use]
}
above10(x, 25)
adove <- function(x, n) {
use <- x > n
x[use]
}
above
above()
source('~/projects/git/datasciencecoursera/test.R', echo=TRUE)
above()
above
above(x, 20)
adove <- function(x, n) {
use <- x > n
x[use]
}
adove <- function(x, n) {
use <- x > n
x[use]
}
x
adove(x,25)
above <- function(x, n=10) {
use <- x > n
x[use]
}
above(x)
above(x, 95)
columnmean <-function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
return means
}
matrix(1:25,4,5)
matrix(1:20,4,5)
y <- matrix(1:20,4,5)
columnmean(y)
columnmean <-function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
return means
}
columnmean <-function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnmean <-function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
return means
}
columnmean <-function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnmean(y)
source("test.R")
search()
for (i in 1:4) {}
for (i in 1:4) {
6 + i}
for (i in 1:4) {
print(6 + i)}
formals(dir)
?formals
formals(rnorm)
rnorm()
rnorm(100)
args(rnorm)
formals(rnorm)
rnorm
ls
enironment
enironment(x)
x <- date("2014-05-15")
x <- Date("2014-05-15")
x <- as.Date("2014-05-15")
x
class(x)
unclass(x)
?unclass
weekdays(x)
months(x)
quarters(x)
x < Sys.time()
x <- Sys.time()
x
as.POSIXct(x)
as.POSIXlt(x)
unclass(x)
unclass(as.POSIXct(x)
)
unclass(as.POSIXlt(x)
)
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 < 10
10 <= 10
5 != 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE
| && c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE,FALSE, FALSE)
TRUE || c(TRUE,FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints[ints>7])
which(ints>7)
any(ints<0)
all(ints>0)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate("sd", (1.4, 3.6, 7.9, 8.8))
evaluate("sd", c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit
submit()
telegram('che', 'cazzo')
submit()
submit()
submit()
mad_libs("Moscow", "dirty", "faggot")
submit()
I' %p% 'love'%p% 'R!'
I' %p% 'love' %p% 'R!'
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
identical(t1, t2)
str(unclass(t2))
?str
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17,
| 1986 08:24"
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, 'days')
difftime(Sys.time(), t1, units='days')
1
q
quit()
x <- 1:10
if(x>5) {}
if(x>5) {
x <- 0 }
lapply
attr(lapply)
attr(lapply)
att(lapply)
x <- 1:20
x
lapply(x,sqrt)
lapply(x,rnorm)
?runif
lapply(x,function(cazzo) cazzo+1)
sapply(x,function(cazzo) cazzo+1)
str(apply)
?str
str(x)
?replications
?rep
rep(5,10)
str(mapply)
library(datasets)
datasets
?datasets
library(help = "datasets")
head("DNase")
head("CO2")
head("Airquality")
head(airquality)
head(CO2)
apply(co2$uptake, mean)
apply(mean, co2$uptake)
lapply(mean, co2$uptake)
tapply(mean, co2$uptake)
mapply(mean, co2$uptake)
mapply(mean, co2[,4])
colMeans(co2$uptake)
colMeans(co2[["uptake"]])
colMeans(co2[,4)
colMeans(co2[,4])
colMeans(co2)
colMeans(co2[,])
?colMeans
colMeans(CO2, 1)
colMeans(CO2[,4], 1)
x <- split(co2, co2$uptake)
x <- split(CO2, CO2$uptake)
x
?gl
gl(c("man", "woman"), 5)
m <- matrix(c(1:10, 11:20), nrow = 10, ncol = 2)
m
m <- matrix(c(1:20), nrow = 10, ncol = 2)
m
m <- matrix(1:20, nrow = 10, ncol = 2)
m
library(swirl)
swirl()
q
quit
exit
help()
help("swirl")
info()
main()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
swirl()
library(swirl)
swirl()
buy
bye
bye()
swirl()
bye()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5,5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(x) x[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flag$landmass)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmass, summary)
